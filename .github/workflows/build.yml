name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4.5.0
        with:
          distribution: 'adopt'
          java-version: '17'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Create local.properties
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > local.properties
          cat local.properties
          
      - name: Set up google-services.json
        run: |
          echo "${{ secrets.GS_CREDENTIALS }}" | base64 -d > ./app/google-services.json
        shell: bash
        
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Build with Gradle
        run: ./gradlew assembleDebug --stacktrace --info
        
      - name: Upload to Google Drive
        uses: adityak74/google-drive-upload-git-action@main
        with:
          credentials: ${{ secrets.CREDENTIALS }}
          filename: "./app/build/outputs/apk/debug/app-debug.apk"
          folderId: ${{ secrets.FOLDER_ID }}
          overwrite: "true"
          
      - name: Set Version
        id: version
        run: |
          VERSION="v$(date +'%Y.%m.%d')"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check and Create Tag
        id: check_tag
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          git fetch origin tag $VERSION || true
          
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null || \
             git ls-remote --exit-code --tags origin "refs/tags/$VERSION" >/dev/null; then
            echo "Tag $VERSION already exists"
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            git tag $VERSION
            git push origin $VERSION
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Get Release ID
        id: get_release
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")
          
          RELEASE_ID=$(echo $RESPONSE | jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ]; then
            echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "RELEASE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Existing Release
        if: steps.get_release.outputs.RELEASE_EXISTS == 'true'
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          RELEASE_ID="${{ steps.get_release.outputs.RELEASE_ID }}"
          
          ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets")
          
          echo $ASSETS | jq -r '.[] | select(.name=="app-debug.apk") | .id' | while read ASSET_ID; do
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          done
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @"./app/build/outputs/apk/debug/app-debug.apk" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=app-debug.apk"

      - name: Create New Release
        if: steps.get_release.outputs.RELEASE_EXISTS != 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ./app/build/outputs/apk/debug/app-debug.apk
          tag_name: ${{ steps.version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
